
-- show number of related computers, and number of related credentials

USE [Symantec_CMDB]-- alter this name to match your Database name
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create procedure [dbo].[spDG_PMWindows_ComplianceByUpdate]
@VendorGuid uniqueidentifier = '9D5F6BB8-8ADF-49D1-9D84-2932CA46CE1E',
@CategoryGuid uniqueidentifier = '00000000-0000-0000-0000-000000000000',
@SupersedenceStatus NVARCHAR(36) = 'non-superseded', -- not used now
@OperatingSystem NVARCHAR(128) = '%',
@DistributionStatus NVARCHAR(16) = 'active',
@FilterCollection uniqueidentifier = 'EB3A1A12-E1C7-4431-B060-F0333E4E488C', -- All Computer
@StartDate DATETIME = NULL,
@EndDate DATETIME = NULL,
@pCulture nvarchar(10) = 'en-US',
@ScopeCollectionGuid uniqueidentifier = '91C68FCB-1822-E793-B59C-2684E99A64CD',
@TrusteeScope varchar(max) = 'S-1-1-0',
@DisplayMode varchar(20) = 'all'
AS
BEGIN
-- Need to set start and end date defaults, if values not passed in from calling function
IF (@StartDate IS NULL)
BEGIN
SET @StartDate = DATEADD(Year, -1, GETDATE())
END
IF (@EndDate IS NULL)
BEGIN
SET @EndDate = GETDATE()
END

DECLARE @c_NotSet nvarchar(32),
@DateFormat int
SELECT @c_NotSet = ISNULL( dbo.fnLocalizeString('notSet', '746a8b51-a570-43ab-8d36-aef36d0c8041', @pCulture), 'Not Set'),
@DateFormat = dbo.fnPMCore_GetCultureCode( @pCulture )

SELECT LOWER(SUBSTRING( sts.StringRef, 10, 100 )) AS [RefName],
sts.[String]
INTO #tmpSeverityString
FROM ( SELECT BaseGuid,
StringRef,
MAX(Priority) AS [Priority]
FROM [dbo].[String] s
JOIN [dbo].[fnGetBaseCultures](@pCulture) f ON f.Culture = s.Culture
WHERE [BaseGuid] = '746A8B51-A570-43AB-8D36-AEF36D0C8041'
AND [StringRef] LIKE 'severity.%'
GROUP BY [BaseGuid], [StringRef]
) AS ref
JOIN [dbo].[fnGetBaseCultures](@pCulture) AS fnc ON fnc.[Priority] = ref.[Priority]
JOIN [dbo].[String] AS sts ON sts.[BaseGuid] = ref.[BaseGuid]
AND sts.[StringRef] = ref.[StringRef]
AND sts.[Culture] = fnc.[Culture]
SELECT swb._ResourceGuid,
swb.FirstReleaseDate AS [Released],
ISNULL( tss.[String], srl.SeverityName ) AS [Severity]
INTO #tmpBulletinNames
FROM Inv_Software_Bulletin swb
JOIN ItemActive asb ON asb.Guid = swb._ResourceGuid
JOIN Inv_PM_Severity_Rating sr ON sr._ResourceGuid = swb._ResourceGuid
AND sr.SeverityRatingSystemGuid <> '6CCEF81F-F791-4DC4-8FC6-90D149FC0187'
JOIN Inv_Severity_Rating_Level srl ON srl._ResourceGuid = sr.SeverityRatingSystemGuid
AND srl.SeverityLevel = sr.SeverityLevel
LEFT JOIN #tmpSeverityString tss ON tss.RefName = LOWER(srl.SeverityName)
WHERE swb.FirstReleaseDate BETWEEN @StartDate AND @EndDate
AND ( @VendorGuid = '00000000-0000-0000-0000-000000000000' OR sr.ProviderGuid = @VendorGuid ) -- vendor filter
AND ( @DistributionStatus = '%' OR asb.Enabled = 1 )
AND sr.SeverityLevel = 3 -- Severity Level for Important
or sr.SeverityLevel = 4 -- Severity Level for Critical
--or sr.SeverityLevel = 2 -- Severity Level for Moderate
--or sr.SeverityLevel = 1 -- Severity Level for Low
--or sr.SeverityLevel = 0 -- Severity Level for Unclassified

DROP TABLE #tmpSeverityString

-- Create a temp table to contain the scoped resources (computers) in it. This
-- table will also have joined in the CollectionMembership, OS filtering, and
-- removal of retired computers.
-- By putting these ResourceGuids into a temporary table (to be joined later)
-- we avoid a large hit of performing these joins and functions calls against
-- a potentially huge number of rows as was being done in an earlier version.
--
SELECT tsc.ResourceGuid
INTO #tempScopedResources
FROM dbo.fnGetTrusteeScopedResourcesByScope( @TrusteeScope, @ScopeCollectionGuid, 1 ) tsc
JOIN Inv_AeX_AC_Identification cid ON cid._ResourceGuid = tsc.ResourceGuid
AND cid.[OS Name] LIKE @OperatingSystem
JOIN CollectionMembership cms ON cms.ResourceGuid = tsc.ResourceGuid
AND cms.CollectionGuid = @FilterCollection
LEFT JOIN vPMCore_GetAllRetiredMachines ret ON ret.Guid = tsc.ResourceGuid
WHERE ret.Guid IS NULL -- exclude the retired machine

SELECT bul._ResourceGuid AS [BulletinGuid],
sua.UpdateGuid AS [UpdateGuid],
COUNT(sua._ResourceGuid) AS [Applicable],
SUM( CASE WHEN sui._ResourceGuid IS NULL THEN 0
WHEN ses._ResourceGuid IS NULL THEN 1 ELSE 0 END )
AS [Installed]
INTO #tmpBulletinCnt
FROM vPMWindows_UpdateApplicable sua
JOIN ResourceAssociation b2u ON b2u.ChildResourceGuid = sua.UpdateGuid
AND b2u.ResourceAssociationTypeGuid = '7EEAB03A-839C-458D-9AF2-55DB6B173293' -- SWB to SWU
JOIN #tmpBulletinNames bul ON bul._ResourceGuid = b2u.ParentResourceGuid
JOIN #tempScopedResources res ON res.ResourceGuid = sua._ResourceGuid
LEFT JOIN vPMWindows_UpdateInstalled sui ON sui.UpdateGuid = sua.UpdateGuid
AND sui._ResourceGuid = sua._ResourceGuid
LEFT JOIN vPMCore_ComputersPendingRebootByPackage
ses ON ses.SoftwareUpdateGuid = sua.UpdateGuid
AND ses._ResourceGuid = sua._ResourceGuid
WHERE sua.UpdateGuid NOT IN -- filter out supersede applicable updates
( SELECT DISTINCT ChildResourceGuid
FROM ResourceAssociation
WHERE ResourceAssociationTypeGuid = '644A995E-211A-4D94-AA8A-788413B7BE5D'
)
GROUP BY bul._ResourceGuid, sua.UpdateGuid
HAVING (@DisplayMode = 'all'
OR (@DisplayMode = 'vulnerable' AND COUNT(sua._ResourceGuid) > (COUNT(sui._ResourceGuid) - COUNT(ses._ResourceGuid)))
OR (@DisplayMode = 'installed' AND COUNT(sua._ResourceGuid) <= (COUNT(sui._ResourceGuid) - COUNT(ses._ResourceGuid)))
)

DROP TABLE #tempScopedResources

SELECT cbu.UpdateGuid AS [_SWUGuid],
it.Name AS [Bulletin],
swu.Name AS [Update],
swb.Severity AS [Severity],
ISNULL( csr.SeverityName, @c_NotSet )
AS [Custom Severity],
swb.Released AS [Release Date],
CAST(CASE cbu.Applicable WHEN 0 THEN 0 ELSE (CAST(cbu.Installed AS float) / cbu.Applicable) * 100 END AS numeric(6,2))
AS [Compliance],
cbu.Applicable AS [Applicable (Count)],
cbu.Installed AS [Installed (Count)],
cbu.Applicable - cbu.Installed
AS [Not Installed (Count)],
-- Drilldown stuff
cbu.BulletinGuid AS [_SWBGuid],
@ScopeCollectionGuid AS [_ScopeCollection],
@FilterCollection AS [_Collection],
@StartDate AS [_StartDate],
@EndDate AS [_EndDate],
@DistributionStatus AS [_DistributionStatus],
@OperatingSystem AS [_OperatingSystem],
@VendorGuid AS [_VendorGuid],
@CategoryGuid AS [_CategoryGuid]
FROM #tmpBulletinCnt cbu
JOIN #tmpBulletinNames swb ON swb._ResourceGuid = cbu.BulletinGuid
JOIN RM_ResourceSoftware_Bulletin it ON it.Guid = cbu.BulletinGuid
JOIN RM_ResourcePatch_Software_Update swu ON swu.Guid = cbu.UpdateGuid
LEFT JOIN vPMCore_SeverityRating csr ON csr._ResourceGuid = swb._ResourceGuid
AND csr.SeverityRatingSystemGuid = '6CCEF81F-F791-4DC4-8FC6-90D149FC0187' -- Custom Sev Rating
LEFT JOIN Inv_Software_Update_Category cat ON cat._ResourceGuid = cbu.UpdateGuid
WHERE ( @CategoryGuid = '00000000-0000-0000-0000-000000000000' OR cat.Category = @CategoryGuid )
ORDER BY [Release Date] DESC, [Bulletin] DESC, [Update]

DROP TABLE #tmpBulletinNames
DROP TABLE #tmpBulletinCnt
END